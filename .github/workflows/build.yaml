name: Build and Release

on:
  push:
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: 'build-and-release'
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [nightly]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache .cargo directory
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Set up Rust (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.rust }}
          set PATH="%USERPROFILE%\.cargo\bin;%PATH%"
          rustup component add rustfmt
          rustup component add clippy
          rustup component add llvm-tools-preview
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-pc-windows-msvc

      - name: Set up Rust (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.rust }}
          export PATH="$HOME/.cargo/bin:$PATH"
          rustup component add rustfmt
          rustup component add clippy
          rustup component add llvm-tools-preview
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-unknown-linux-musl

      - name: Set up Rust (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.rust }}
          export PATH="$HOME/.cargo/bin:$PATH"
          rustup component add rustfmt
          rustup component add clippy
          rustup component add llvm-tools-preview
          rustup target add x86_64-apple-darwin

      - name: Get app version (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        id: get_version_unix
        run: |
          if [ -f "Cargo.toml" ]; then
            echo "app_version=$(grep -m1 version Cargo.toml | cut -d\" -f2)" >> $GITHUB_OUTPUT
          fi

      - name: Get app version (Windows)
        if: matrix.os == 'windows-latest'
        id: get_version_windows
        run: |
          $file = "Cargo.toml"
          $content = Get-Content $file -Raw

          $regexPattern = 'version\s*=\s*"(.+?)"'
          $match = [regex]::Match($content, $regexPattern)

          if ($match.Success) {
              $version = $match.Groups[1].Value
              $version = "app_version=$version"
              $outputFilePath = $env:GITHUB_OUTPUT
              Set-Content -Path $outputFilePath -Value $version
              Write-Host "Version saved to: $outputFilePath"
          } else {
              Write-Host "Version not found."
          }

      - name: Build
        run: cargo build --release

      - name: Create Release Text (Linux/macOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          body="## Commits\n"
          body+=$(git log $(git describe --tags --always --abbrev=0)..HEAD --pretty=format:'\n- [`%h`](${{ github.server_url }}/${{ github.repository }}/commit/%H): %s (%an)') 
          echo -e $body >> release.md

      - name: Create Release Text (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $body = "## Commits`n"
          $body += git log $(git describe --tags --always --abbrev=0)..HEAD --pretty=format:'`n- [`%h`](${{ github.server_url }}/${{ github.repository }}/commit/%H): %s (%an)' 
          Set-Content -Path release.md -Value $body
          Write-Host "Release text saved to: release.md"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/gpt-commit-rust*
          tag_name: v${{ steps.get_version_unix.outputs.app_version || steps.get_version_windows.outputs.app_version }}-${{ matrix.os }}
          body_path: release.md
